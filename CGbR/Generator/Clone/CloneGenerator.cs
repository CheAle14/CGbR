// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CGbR
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal partial class CloneGenerator : CloneGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("        /// <summary>\r\n        /// Method to create a deep or shallow copy of thi" +
                    "s object\r\n        /// </summary>\r\n        public ");
            
            #line 10 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" Clone(bool deep)\r\n        {\r\n            var copy = new ");
            
            #line 12 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 13 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

    var simple = Model.Properties.Where(SimplyCopy).ToArray();
    if (simple.Length > 0)
    {

            
            #line default
            #line hidden
            this.Write("            // All value types can be simply copied\r\n");
            
            #line 19 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

        GenerateSimplyCopy(simple, string.Empty);
    }

    var refType = Model.Properties.Where(DeepCopy).ToArray();
    if (refType.Length > 0)
    {

            
            #line default
            #line hidden
            this.Write("            if (deep)\r\n            {\r\n                // In a deep clone the refe" +
                    "rences are cloned \r\n");
            
            #line 30 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

        foreach (var prop in refType)
        {
            var isCollection = CollectionWrapper(prop, true);
            var indent = isCollection ? new string(' ', 8) : string.Empty;
            // Only classes can be cloned
            if (prop.ValueType == ModelValueType.Class)
            {
                var child = Model.References.OfType<ClassModel>().FirstOrDefault(r => r.Name == prop.ElementType);
                const string cloneable = nameof(ICloneable);
                var source = isCollection ? "value" : prop.Name;
                var target = isCollection ? source : $"copy.{source}";
                if (child != null && child.Interfaces.Contains(cloneable))
                {
                    var cloneAtt = prop.GetAttributeOrNull("ReferenceCloneAttribute");
                    var cloneType = cloneAtt == null || cloneAtt.Parameters[0] == "Deep" ? "true" : "false";

            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 47 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(indent));
            
            #line default
            #line hidden
            this.Write("if (");
            
            #line 47 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(source));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                ");
            
            #line 48 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(indent));
            
            #line default
            #line hidden
            this.Write("{\r\n                ");
            
            #line 49 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(indent));
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 49 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(target));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 49 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(source));
            
            #line default
            #line hidden
            this.Write(".Clone(true);\r\n                ");
            
            #line 50 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(indent));
            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 51 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

                }
                else
                {

            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 56 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(indent));
            
            #line default
            #line hidden
            
            #line 56 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isCollection ? string.Empty : $"{target} = {source}; "));
            
            #line default
            #line hidden
            this.Write("//Can not clone it - just copy it\r\n");
            
            #line 57 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
                    
                }
            }
            CollectionWrapper(prop, false);
        }

            
            #line default
            #line hidden
            this.Write("            }\r\n            else\r\n            {\r\n                // In a shallow c" +
                    "lone only references are copied\r\n");
            
            #line 67 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

        GenerateSimplyCopy(refType, new string(' ', 4));

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 71 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

    }

            
            #line default
            #line hidden
            this.Write("            return copy;\r\n        }\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 76 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"


    private void GenerateSimplyCopy(IEnumerable<PropertyModel> properties, string indent)
    {
        foreach (var prop in properties)
        {

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(indent));

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("copy.");

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("; \r\n");

        
        #line default
        #line hidden
        
        #line 84 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
           
        }      
    }

    private bool CollectionWrapper(PropertyModel prop, bool head)
    {
        if (!prop.IsCollection)
            return false;

        if (head)
        {

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(" \r\n                if (");

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(" != null)\r\n                {\r\n                    var temp");

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorTools.CollectionConstructor(prop, $"{prop.Name}.{GeneratorTools.CollectionSize(prop)}")));

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 99 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

            if (GeneratorTools.SupportsForLoop(prop))
            {

        
        #line default
        #line hidden
        
        #line 102 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("                    for (var i = 0; i < ");

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GeneratorTools.CollectionSize(prop)));

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("; i++)\r\n                    {\r\n                        var value = ");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("[i];\r\n");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
                
            }
            else
            {

        
        #line default
        #line hidden
        
        #line 110 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("                    foreach (var value in ");

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(")\r\n                    {\r\n");

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
                
            }
        }
        else
        {
            if (prop.CollectionType == "Array")
            {

        
        #line default
        #line hidden
        
        #line 120 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("                        temp");

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("[i] = value;\r\n");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

            }
            else
            {

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("                        temp");

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(".Add(value);\r\n");

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
 
            }

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write("                    }\r\n                    copy.");

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(" = temp");

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"
this.Write(";\r\n                }\r\n");

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

        }

        return true;
    }
    
    // FInd all value types
    private bool SimplyCopy(PropertyModel prop)
    {
        if (prop.HasAttribute("CloneIgnoreAttribute"))
            return false;

        var cloneAtt = prop.GetAttributeOrNull("ReferenceCloneAttribute");
        if (cloneAtt != null && cloneAtt.Parameters[0] == "Reference")
            return true;

        if (prop.IsCollection)
            return false;

        if (prop.ValueType == ModelValueType.Class)
        {
            // Check if it is actually an enum reference
            return Model.References.Any(r => r.Name == prop.ElementType && r is EnumModel);
        }

        return true;
    }

    // Find all reference types
    private bool DeepCopy(PropertyModel prop)
    {
        if (prop.HasAttribute("CloneIgnoreAttribute"))
            return false;

        return !SimplyCopy(prop);
    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\thomas\Desktop\CGbR\CGbR\Generator\Clone\CloneGenerator.tt"

private global::CGbR.ClassModel _ModelField;

/// <summary>
/// Access the Model parameter of the template.
/// </summary>
private global::CGbR.ClassModel Model
{
    get
    {
        return this._ModelField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelValueAcquired = false;
if (this.Session.ContainsKey("Model"))
{
    this._ModelField = ((global::CGbR.ClassModel)(this.Session["Model"]));
    ModelValueAcquired = true;
}
if ((ModelValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Model");
    if ((data != null))
    {
        this._ModelField = ((global::CGbR.ClassModel)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal class CloneGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
