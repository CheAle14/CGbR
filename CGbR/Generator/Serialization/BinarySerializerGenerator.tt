<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net.Configuration" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="Model" type="CGbR.ClassModel" #>
        private static Encoding _encoder = new UTF8Encoding();

        /// <summary>
        /// Binary size of the object
        /// </summary>
        public int Size
        {
            get 
            { 
                var size = <#= BinarySize.OfClass(Model) #>;
                // Add size for collections and strings
<#
    foreach (var property in Model.Properties.Where(BinarySize.IsVariable)
                                             .Where(p => p.HasAttribute(nameof(DataMemberAttribute))))
    {
        string entrySize;
        switch (property.ValueType)
        {
			case ValueType.Class:
				// Find class from other messages
                var child = Model.References.First(r => r.Name == property.ElementType);
				if(property.IsCollection)
					entrySize = BinarySize.IsVariable(child) ? "Sum(entry => entry.Size)" : $"{GeneratorTools.CollectionSize(property)} * {BinarySize.OfClass(child)}";
				else
					entrySize = "Size";
				break;
			case ValueType.String:
                // Flexible strings are only included as their length because the length field is part of the fixed size
                entrySize = "Length";
                break;
            case ValueType.Byte:
                entrySize = "Length";
                break;
			default:
                entrySize = $"{GeneratorTools.CollectionSize(property)} * {BinarySize.OfProperty(property)}";
				break;
        }
#>
                size += <#= property.Name #>.<#= entrySize #>;
<#
    }
#>  
                return size;              
            }
        }

        /// <summary>
        /// Convert object to bytes
        /// </summary>
        public byte[] ToBytes()
        {
            var index = 0;
            var bytes = new byte[Size];

            return ToBytes(bytes, ref index);
        }

        /// <summary>
        /// Convert object to bytes within object tree
        /// </summary>
        void IByteSerializable.ToBytes(byte[] bytes, ref int index)
        {
            ToBytes(bytes, ref index);
        }

        /// <summary>
        /// Convert object to bytes within object tree
        /// </summary>
        public byte[] ToBytes(byte[] bytes, ref int index)
        {
            if (index + Size > bytes.Length)
                throw new ArgumentOutOfRangeException("index", "Object does not fit in array");

<#
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute)))
    {
#>
            // Convert <#= property.Name #>
<#
        ToBytes(property);          
    }
#>
            return bytes;
        }

        /// <summary>
        /// Create object from byte array
        /// </summary>
        public <#= Model.Name #> FromBytes(byte[] bytes)
        {
            var index = 0;            
            return FromBytes(bytes, ref index); 
        }

        /// <summary>
        /// Create object from segment in byte array
        /// </summary>
        void IByteSerializable.FromBytes(byte[] bytes, ref int index)
        {
            FromBytes(bytes, ref index);
        }

        /// <summary>
        /// Create object from segment in byte array
        /// </summary>
        public <#= Model.Name #> FromBytes(byte[] bytes, ref int index)
        {
<#
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute)))
    {
#>
            // Read <#= property.Name #>
<#
        FromBytes(property);
    }
#>

            return this;
        }
<#+
    //---------------------------------------------
    // Generate a byte conversion for this field 
    //--------------------------------------------
    private void ToBytes(PropertyModel property)
    {
        // Indentation throughout the method
        var indent = property.IsCollection && property.ValueType != ValueType.Byte ? "\t" : string.Empty;

        // Optional length prefix
        GenerateLengthPrefix(property);

        CollectionWrapper(property, true);

        // Now we add the real value
        var target = property.IsCollection ? "value" : property.Name;
        var nullable = false;
        string conversion, increment;
        switch (property.ValueType)
        {
            case ValueType.String:
                conversion = BlockCopy(false, $"_encoder.GetBytes({target})", $"{target}.Length");
                increment = $"{target}.Length";
                nullable = true;
                break;
            case ValueType.Class:
                conversion = $"{target}.ToBytes(bytes, ref index)";
                increment = null;
                break;
            case ValueType.Boolean:
                conversion = $"bytes[index] = {target} ? (byte)1 : (byte)0";
                increment = "1";
                break;
            case ValueType.Byte:
                conversion = property.IsCollection ? BlockCopy(false, property.Name, $"{property.Name}.Length") : $"bytes[index] = {target}";
                increment = property.IsCollection ? $"{property.Name}.Length" : "1";
                nullable = property.IsCollection;
                break;
            default:
                conversion = BlockCopy(true, target, BinarySize.OfProperty(property).ToString("D"));
                increment = BinarySize.OfProperty(property).ToString("D");
                break;
        }

        if (nullable || property.IsCollection)
        {
            indent += "\t";
        }

        NullableWrapper(property, nullable, true);

#>
            <#= indent #><#= conversion #>;
<#+
        if (!string.IsNullOrEmpty(increment))
        {
#>
            <#= indent #>index += <#= increment #>;
<#+
        }

        NullableWrapper(property, nullable, false);

        CollectionWrapper(property, false);
    }

    //-------------------------------------------------------
    // Generate 2 byte length prefix for collection length 
    //-------------------------------------------------------
    private void GenerateLengthPrefix(PropertyModel property)
    {
        if (!property.IsCollection && property.ValueType != ValueType.String)
            return;
        
#>
            // Two bytes length information for each dimension
<#+
        for (var dimension = 0; dimension < property.Dimensions; dimension++)
        {
#>
            <#= BlockCopy(true, $"(ushort)({property.Name} == null ? 0 : {property.Name}.{GeneratorTools.CollectionSize(property, property.Dimensions > 1 ? dimension : -1 )})", "2") #>;
            index += 2;
<#+   
        }  
    }

    //--------------------------------------
    // Generate the Buffer.BlockCopy code
    //--------------------------------------
    private static string BlockCopy(bool bitConverter, string source, string length)
    {
        return bitConverter 
            ? $"GeneratorByteConverter.Include({source}, bytes, index)"
            : $"Buffer.BlockCopy({source}, 0, bytes, index, {length})";
    }

    //--------------------------------------
    // Wrap conversion of nullable property
    //--------------------------------------
    private void NullableWrapper(PropertyModel property,bool nullable, bool header)
    {
        if (!nullable)
            return;

        if (header)
        {
#>
            if (<#= property.Name #> != null)
            {
<#+
        }
        else
        {
#>
            }
<#+
        }
    }

    //--------------------------------------
    // Code fragments wrapping a collection
    //--------------------------------------
    private void CollectionWrapper(PropertyModel property, bool start)
    {
        if (!property.IsCollection || property.ValueType == ValueType.Byte)
            return;

        if (start)
        {
#>
            if (<#= property.Name #> != null)
            {
<#+
            if (GeneratorTools.SupportsForLoop(property))
            {
                var dimensions = new[] { "i", "j", "k" };
                for (var dimension = 0; dimension < property.Dimensions; dimension++)
                {

#>
                for(var <#= dimensions[dimension] #> = 0; <#= dimensions[dimension] #> < <#= property.Name #>.<#= GeneratorTools.CollectionSize(property, dimension) #>; <#= dimensions[dimension] #>++)
<#+
                }
#>
                {
                    var value = <#= property.Name #>[<#= string.Join(",", Enumerable.Range(0, property.Dimensions).Select(i => dimensions[i])) #>];
<#+
            }
            else
            {
#>
                foreach(var value in <#= property.Name #>)
                {
<#+

            }
        }
        else
        {
#>
                }
            }
<#+
        }
    }

    //--------------------------------------
    // Read property from the byte stream
    //--------------------------------------
    private void FromBytes(PropertyModel property)
    {
        var target = property.IsCollection ? "var value" : property.Name;
	    var indent = property.IsCollection ? "\t" : string.Empty;

	    var increment = "0";
	    string conversion;
	    switch (property.ValueType)
	    {
	        case ValueType.Class:
	            conversion = $"new {property.ElementType}().FromBytes(bytes, ref index)";
	            break;
	        case ValueType.Byte:
	            conversion = "bytes[index]";
	            increment = "1";
	            break;
		    case ValueType.String:
	            conversion = $"_encoder.GetString(bytes, index, {FieldLength(property, 0)})";
	            increment = FieldLength(property, 0);
			    break;
	        default:
			    conversion = $"BitConverter.To{property.ValueType.ToString("G")}(bytes, index)";
	            increment = BinarySize.OfProperty(property).ToString("D");
	            break;
	    }

        GenerateReadLoop(property, true);

#>
            <#= indent #><#= target #> = <#= conversion #>;
            <#= indent #>index += <#= increment #>;
<#+        
        GenerateReadLoop(property, false);
        
    }

    //----------------------------------------
    // Generate loop for reading collections
    //----------------------------------------
    private void GenerateReadLoop(PropertyModel property, bool header)
    {
        if (!property.IsCollection && property.ValueType != ValueType.String) 
            return;

        if (header)
        {
            // Read the length
            for (var dimension = 0; dimension < property.Dimensions; dimension++)
            {
#>
            var <#= FieldLength(property, dimension) #> = BitConverter.ToUInt16(bytes, index);
            index += 2;
<#+
            }
        }

        if(header && property.IsCollection)
        {
            // Create temp object
#>
            var temp<#= property.Name #> = <#= GeneratorTools.CollectionConstructor(property, FieldLength(property)) #>;
<#+ 
             
            // Generate the loop
            var dimensions = new[] { "i", "j", "k" };
            for (var dimension = 0; dimension < property.Dimensions; dimension++)
            {
#>
            for (var <#= dimensions[dimension] #> = 0; <#= dimensions[dimension] #> < <#= FieldLength(property, dimension) #>; <#= dimensions[dimension] #>++)
<#+
            }
#>
            {
<#+           
        }
        else if(!header && property.IsCollection)
        {
            var collAssignment = property.CollectionType == "Array"
                ? $"temp{property.Name}[{FieldPosition(property)}] = value" 
                : $"temp{property.Name}.Add(value)";

#>
                <#= collAssignment #>;
            }
            <#= property.Name #> = temp<#= property.Name #>;
<#+   
        }
    }

    //---------------------------
    // Generate length variable
    //---------------------------
    private static string FieldLength(PropertyModel property)
    {
        return string.Join(",", Enumerable.Range(0, property.Dimensions).Select(i => FieldLength(property, i)));
    }

    //---------------------------
    // Generate length variable
    //---------------------------
    private static string FieldPosition(PropertyModel property)
    {
        var dimensions = new[] { "i", "j", "k" };
        return string.Join(",", Enumerable.Range(0, property.Dimensions).Select(i => dimensions[i]));
    }

    //---------------------------
    // Generate length variable
    //---------------------------
    private static string FieldLength(CodeElementModel property, int dimension)
    {
        var dimensions = new[] {"Length", "Width", "Height"};
        return property.Name.ToLower() + dimensions[dimension];
    }
#>