<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="Model" type="CGbR.ClassModel" #>
        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public string ToJson()
        {
            var builder = new StringBuilder();
            IncludeJson(builder);
            return builder.ToString();
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public void IncludeJson(StringBuilder writer)
        {
            writer.Append('{');

<#
    var first = true;
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute)))
    {
        
#>
            writer.Append("<#= first ? string.Empty : "," #>\"<#= property.Name #>\":");
<#
        if (property.IsCollection)
        {
#>
            if (<#= property.Name #> == null)
                writer.Append("null");
            else
            {
                writer.Append('[');
                foreach (var value in <#= property.Name #>)
                {
<#
        }
        var target = property.IsCollection ? "value" : property.Name;
        if (property.ValueType == ValueType.String)
            target = $"string.Format(\"\\\"{{0}}\\\"\", {target})";
        else if(property.ValueType != ValueType.Class)
            target = $"{target}.ToString(CultureInfo.InvariantCulture)";
#>
            <#= property.IsCollection ? "\t\t" : string.Empty #><#= property.ValueType == ValueType.Class ? $"{target}.IncludeJson(writer)" : $"writer.Append({target})" #>;
<#
        if (property.IsCollection)
        {
#>
                    writer.Append(',');
                }
                writer.Append(']');
            }
<#            
        }
#>
    
<#
        first = false;
    }
#>
            writer.Append('}');
        }

        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public <#= Model.Name #> FromJson(string json)
        {
            using (var reader = new JsonTextReader(new StringReader(json)))
            {
                return FromJson(reader);
            }
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public <#= Model.Name #> FromJson(JsonReader reader)
        {
            while (reader.Read())
            {
                // Break on EndObject
                if (reader.TokenType == JsonToken.EndObject)
                    break;

                // Only look for properties
                if (reader.TokenType != JsonToken.PropertyName)
                    continue;

                switch ((string) reader.Value)
                {
<#
    // We start with the easy properties and move on to collections
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute))
                                  .Where(p => !p.IsCollection))
    {
#>
                    case "<#= property.Name #>":
                        reader.Read();
                        <#= property.Name #> = <#= Converter(property) #>;
                        break;

<#
    }

    // And for the fun part collections but first with only one dimension
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute))
                                  .Where(p => p.IsCollection))
    {
        var varName = property.Name.ToLower();
        var condition = property.ValueType == ValueType.Class
            ? "== JsonToken.StartObject"
            : "!= JsonToken.EndArray";
#>
                    case "<#= property.Name #>":
                        reader.Read(); // Read token where array should begin
                        if (reader.TokenType == JsonToken.Null)
                            break;
                        var <#= varName #> = new List<<#= property.ElementType #>>();
                        while (reader.Read() && reader.TokenType <#= condition #>)
                            <#= varName #>.Add(<#= Converter(property) #>);
                        <#= property.Dimensions > 1 ? "// TODO: " : string.Empty #><#= property.Name #> = <#= varName #><#= GeneratorTools.ToCollection(property) #>;<#= property.Dimensions > 1 ? "<-- Figure this out!" : string.Empty #>
                        break;

<#
    }
#>
                }
            }

            return this;
        }
<#+
    // Converter for different property types
    private static string Converter(PropertyModel property)
    {
        var converter = property.ValueType == ValueType.Class
            ? $"new {property.ElementType}().FromJson(reader)"
            : $"Convert.To{property.ValueType}(reader.Value)";
        return converter;
    }
#>