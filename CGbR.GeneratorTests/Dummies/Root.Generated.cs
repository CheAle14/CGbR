/*
 * This code was generated by the CGbR generator on 4/3/2016. Any manual changes will be lost on the next build.
 * 
 * For questions or bug reports please refer to https://github.com/Toxantron/CGbR or contact the distributor of the
 * 3rd party generator target.
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace CGbR.GeneratorTests
{
    /// <summary>
    /// Auto generated class by CGbR project
    /// </summary>
    public partial class Root
    {
        #region BinarySerializer

        /// <summary>
        /// Binary size of the object
        /// </summary>
        public int Size
        {
            get { return 4; }
        }

        /// <summary>
        /// Convert object to bytes
        /// </summary>
        public byte[] ToBytes()
        {
            var index = 0;
            var bytes = new byte[Size];

            return ToBytes(bytes, ref index);
        }

        /// <summary>
        /// Convert object to bytes within object tree
        /// </summary>
        public byte[] ToBytes(byte[] bytes, ref int index)
        {
            //Buffer.BlockCopy(BitConverter.GetBytes(Number), 0, bytes, index, 4);
            index += 4;

            //Buffer.BlockCopy(BitConverter.GetBytes(Partials), 0, bytes, index, 4);
            index += 4;

            return bytes;
        }

        /// <summary>
        /// Create object from byte array
        /// </summary>
        public Root FromBytes(byte[] bytes)
        {
            var index = 0;            
            return FromBytes(bytes, ref index); 
        }

        /// <summary>
        /// Create object from segment in byte array
        /// </summary>
        public Root FromBytes(byte[] bytes, ref int index)
        {

            return this;
        }
        
        #endregion

        #region JsonSerializer

        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public string ToJson()
        {
            var builder = new StringBuilder();
            var stringWriter = new StringWriter(builder);

            using (var writer = new JsonTextWriter(stringWriter))
            {
                IncludeJson(writer);

                return builder.ToString();
            }
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public void IncludeJson(JsonWriter writer)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("Number");
            writer.WriteValue(Number);
    
            writer.WritePropertyName("Partials");
            writer.WriteStartArray();
            for (var i = 0; i < Partials?.Length; i++)
            {
            	Partials[i].IncludeJson(writer);
            }
            writer.WriteEndArray();
    
            writer.WriteEndObject();
        }

        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public Root FromJson(string json)
        {
            using (var reader = new JsonTextReader(new StringReader(json)))
            {
                return FromJson(reader);
            }
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public Root FromJson(JsonReader reader)
        {
            while (reader.Read())
            {
                // Break on EndObject
                if (reader.TokenType == JsonToken.EndObject)
                    break;

                // Only look for properties
                if (reader.TokenType != JsonToken.PropertyName)
                    continue;

                switch ((string) reader.Value)
                {
                    case "Number":
                        Number = (int) reader.ReadAsInt32();
                        break;

                    case "Partials":
                        var partials = new List<Partial>();
                        while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                            partials.Add(new Partial().FromJson(reader));
                        Partials = partials.ToArray();
                        break;

                }
            }

            return this;
        }


        
        #endregion

    }
}