<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="Model" type="CGbR.ClassModel" #>
        private static Encoding _encoder = new UTF8Encoding();

        /// <summary>
        /// Binary size of the object
        /// </summary>
        public int Size
        {
            get 
            { 
                var size = <#= BinarySize.OfClass(Model) #>;
                // Add size for collections and strings
<#
    foreach (var property in Model.Properties.Where(BinarySize.IsVariable))
    {
        string entrySize;
        switch (property.ValueType)
        {
			case ValueType.Class:
				// Find class from other messages
                var child = Model.References.First(r => r.Name == property.ElementType);
				if(property.IsCollection)
					entrySize = BinarySize.IsVariable(child) ? "Sum(entry => entry.Size)" : $"{GeneratorTools.CollectionSize(property)} * {BinarySize.OfClass(child)}";
				else
					entrySize = "Size";
				break;
			case ValueType.String:
                // Flexible strings are only included as their length because the length field is part of the fixed size
                entrySize = "Length";
                break;
            case ValueType.Byte:
                entrySize = "Length";
                break;
			default:
                entrySize = $"{GeneratorTools.CollectionSize(property)} * {BinarySize.OfProperty(property)}";
				break;
        }
#>
                size += <#= property.Name #>.<#= entrySize #>;
<#
    }
 #>  
                return size;              
            }
        }

        /// <summary>
        /// Convert object to bytes
        /// </summary>
        public byte[] ToBytes()
        {
            var index = 0;
            var bytes = new byte[Size];

            return ToBytes(bytes, ref index);
        }

        /// <summary>
        /// Convert object to bytes within object tree
        /// </summary>
        public byte[] ToBytes(byte[] bytes, ref int index)
        {
            if (index + Size > bytes.Length)
                throw new ArgumentOutOfRangeException("");

<#
    foreach (var property in Model.Properties.WhereAttribute(nameof(DataMemberAttribute)))
    {
#>
            // Convert <#= property.Name #>
<#
        ToBytes(property);          
    }
#>
            return bytes;
        }

        /// <summary>
        /// Create object from byte array
        /// </summary>
        public <#= Model.Name #> FromBytes(byte[] bytes)
        {
            var index = 0;            
            return FromBytes(bytes, ref index); 
        }

        /// <summary>
        /// Create object from segment in byte array
        /// </summary>
        public <#= Model.Name #> FromBytes(byte[] bytes, ref int index)
        {
            return this;
        }

<#
        // -------------------------------------------------------------------
        // Generate fast inline methods to write primitive types the the array
        // -------------------------------------------------------------------

    foreach (ValueType value in Enum.GetValues(typeof(ValueType)))
    {
        // Only primitve types with at least 2 bytes
        if (value < ValueType.Int16 || value > ValueType.UInt64)
            continue;

        var name = value.ToString("G");
#>
        /// <summary>
        /// Writer property of type <#= name #> to bytes by using pointer opertations
        /// </summary>
        private static unsafe void Include(<#= value.ToString("F") #> value, byte[] bytes, int index)
        {
            fixed(byte* b = bytes)
                *((<#= value.ToString("G") #>*)(b + index)) = value;
        }
<#
    }
#>
<#+
    //---------------------------------------------
    // Generate a byte conversion for this field 
    //--------------------------------------------
    private void ToBytes(PropertyModel property)
    {
        // Indentation throughout the method
        var indent = property.IsCollection && property.ValueType != ValueType.Byte ? "\t" : string.Empty;

        // Optional length prefix
        GenerateLengthPrefix(property);

        CollectionWrapper(property, true);

        // Now we add the real value
        var target = property.IsCollection ? "value" : property.Name;
        string conversion, increment;
        switch (property.ValueType)
        {
            case ValueType.String:
                conversion = $"if ({target} != null)  " + BlockCopy(false, $"_encoder.GetBytes({target})", $"{target}.Length");
                increment = $"{target}.Length";
                break;
            case ValueType.Class:
                conversion = $"{target}.ToBytes(bytes, ref index)";
                increment = null;
                break;
            case ValueType.Boolean:
                conversion = $"bytes[index] = {target} ? (byte)1 : (byte)0";
                increment = "1";
                break;
            case ValueType.Byte:
                conversion = property.IsCollection ? $"if ({property.Name} != null) " + BlockCopy(false, property.Name, $"{property.Name}.Length") : $"bytes[index] = {target}";
                increment = property.IsCollection ? $"{property.Name}.Length" : "1";
                break;
            default:
                conversion = BlockCopy(true, target, BinarySize.OfProperty(property).ToString("D"));
                increment = BinarySize.OfProperty(property).ToString("D");
                break;
        }
#>
            <#= indent #><#= conversion #>;
<#+
        if (!string.IsNullOrEmpty(increment))
        {
#>
            <#= indent #>index += <#= increment #>;
<#+
        }

        CollectionWrapper(property, false);
    }

    //-------------------------------------------------------
    // Generate 2 byte length prefix for collection length 
    //-------------------------------------------------------
    private void GenerateLengthPrefix(PropertyModel property)
    {
        if (!property.IsCollection && property.ValueType != ValueType.String)
            return;
        
#>
            // Two bytes length information for each dimension
<#+
        for (var dimension = 0; dimension < property.Dimensions; dimension++)
        {
#>
            <#= BlockCopy(true, $"(ushort)({property.Name} == null ? 0 : {property.Name}.{GeneratorTools.CollectionSize(property, property.Dimensions > 1 ? dimension : -1 )})", "2") #>
            index += 2;
<#+   
        }  
    }

    //--------------------------------------
    // Generate the Buffer.BlockCopy code
    //--------------------------------------
    private static string BlockCopy(bool bitConverter, string source, string length)
    {
        return bitConverter 
            ? $"Include({source}, bytes, index);"
            : $"Buffer.BlockCopy({source}, 0, bytes, index, {length});";
    }


    // Code fragments wrapping a collection
    private void CollectionWrapper(PropertyModel property, bool start)
    {
        if (!property.IsCollection || property.ValueType == ValueType.Byte)
            return;

        if (start)
        {
#>
            // Skip null collections
            if (<#= property.Name #> != null)
<#+
            if (GeneratorTools.SupportsForLoop(property))
            {
#>
            for(var i = 0; index < <#= property.Name #>.<#= GeneratorTools.CollectionSize(property) #>; index++)
            {
                var value = <#= property.Name #>[i];
<#+
            }
            else
            {
#>
            foreach(var value in <#= property.Name #>)
            {
<#+

            }
        }
        else
        {
#>
            }
<#+
        }
    }
#>