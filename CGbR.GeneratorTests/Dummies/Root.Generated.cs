/*
 * This code was generated by the CGbR generator on 08.04.2016. Any manual changes will be lost on the next build.
 * 
 * For questions or bug reports please refer to https://github.com/Toxantron/CGbR or contact the distributor of the
 * 3rd party generator target.
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

namespace CGbR.GeneratorTests
{
    /// <summary>
    /// Auto generated class by CGbR project
    /// </summary>
    public partial class Root
    {
        #region BinarySerializer

        private static Encoding _encoder = new UTF8Encoding();

        /// <summary>
        /// Binary size of the object
        /// </summary>
        public int Size
        {
            get 
            { 
                var size = 8;
                // Add size for collections and strings
                size += Partials.Sum(entry => entry.Size);
                size += Numbers.Count * 8;
  
                return size;              
            }
        }

        /// <summary>
        /// Convert object to bytes
        /// </summary>
        public byte[] ToBytes()
        {
            var index = 0;
            var bytes = new byte[Size];

            return ToBytes(bytes, ref index);
        }

        /// <summary>
        /// Convert object to bytes within object tree
        /// </summary>
        public byte[] ToBytes(byte[] bytes, ref int index)
        {
            if (index + Size > bytes.Length)
                throw new ArgumentOutOfRangeException("");
            // Convert Number
            Buffer.BlockCopy(BitConverter.GetBytes(Number), 0, bytes, index, 4);;
            index += 4;
            // Convert Partials
            // Two bytes length information for each dimension
            Buffer.BlockCopy(BitConverter.GetBytes((ushort)(Partials == null ? 0 : Partials.Length)), 0, bytes, index, 2);
            index += 2;
            // Skip null collections
            if (Partials != null)
            foreach(var value in Partials)
            {
            	value.ToBytes(bytes, ref index);
            }
            // Convert Numbers
            // Two bytes length information for each dimension
            Buffer.BlockCopy(BitConverter.GetBytes((ushort)(Numbers == null ? 0 : Numbers.Count)), 0, bytes, index, 2);
            index += 2;
            // Skip null collections
            if (Numbers != null)
            for(var i = 0; index < Numbers.Count; index++)
            {
                var value = Numbers[i];
            	Buffer.BlockCopy(BitConverter.GetBytes(value), 0, bytes, index, 8);;
            	index += 8;
            }
            return bytes;
        }

        /// <summary>
        /// Create object from byte array
        /// </summary>
        public Root FromBytes(byte[] bytes)
        {
            var index = 0;            
            return FromBytes(bytes, ref index); 
        }

        /// <summary>
        /// Create object from segment in byte array
        /// </summary>
        public Root FromBytes(byte[] bytes, ref int index)
        {
            return this;
        }

        /// <summary>
        /// Writer property of type UInt16 to bytes by using pointer opertations
        /// </summary>
        private static unsafe void Include(UInt16 value, byte[] bytes, int index)
        {
            fixed(byte* b = bytes)
                *((UInt16*)(b + index)) = value;
        }
        /// <summary>
        /// Writer property of type Int32 to bytes by using pointer opertations
        /// </summary>
        private static unsafe void Include(Int32 value, byte[] bytes, int index)
        {
            fixed(byte* b = bytes)
                *((Int32*)(b + index)) = value;
        }
        /// <summary>
        /// Writer property of type UInt64 to bytes by using pointer opertations
        /// </summary>
        private static unsafe void Include(UInt64 value, byte[] bytes, int index)
        {
            fixed(byte* b = bytes)
                *((UInt64*)(b + index)) = value;
        }

        
        #endregion

        #region JsonSerializer

        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public string ToJson()
        {
            var builder = new StringBuilder();
            using(var writer = new StringWriter(builder))
            {
                IncludeJson(writer);
                return builder.ToString();
            }
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public void IncludeJson(TextWriter writer)
        {
            writer.Write('{');

            writer.Write("\"Number\":");
            writer.Write(Number.ToString(CultureInfo.InvariantCulture));
    
            writer.Write(",\"Partials\":");
            if (Partials == null)
                writer.Write("null");
            else
            {
                writer.Write('[');
                foreach (var value in Partials)
                {
            		value.IncludeJson(writer);
                    writer.Write(',');
                }
                writer.Write(']');
            }
    
            writer.Write(",\"Numbers\":");
            if (Numbers == null)
                writer.Write("null");
            else
            {
                writer.Write('[');
                foreach (var value in Numbers)
                {
            		writer.Write(value.ToString(CultureInfo.InvariantCulture));
                    writer.Write(',');
                }
                writer.Write(']');
            }
    
            writer.Write('}');
        }

        /// <summary>
        /// Convert object to JSON string
        /// </summary>
        public Root FromJson(string json)
        {
            using (var reader = new JsonTextReader(new StringReader(json)))
            {
                return FromJson(reader);
            }
        }

        /// <summary>
        /// Include this class in a JSON string
        /// </summary>
        public Root FromJson(JsonReader reader)
        {
            while (reader.Read())
            {
                // Break on EndObject
                if (reader.TokenType == JsonToken.EndObject)
                    break;

                // Only look for properties
                if (reader.TokenType != JsonToken.PropertyName)
                    continue;

                switch ((string) reader.Value)
                {
                    case "Number":
                        reader.Read();
                        Number = Convert.ToInt32(reader.Value);
                        break;

                    case "Partials":
                        reader.Read(); // Read token where array should begin
                        if (reader.TokenType == JsonToken.Null)
                            break;
                        var partials = new List<Partial>();
                        while (reader.Read() && reader.TokenType == JsonToken.StartObject)
                            partials.Add(new Partial().FromJson(reader));
                        Partials = partials.ToArray();
                        break;

                    case "Numbers":
                        reader.Read(); // Read token where array should begin
                        if (reader.TokenType == JsonToken.Null)
                            break;
                        var numbers = new List<ulong>();
                        while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                            numbers.Add(Convert.ToUInt64(reader.Value));
                        Numbers = numbers;
                        break;

                }
            }

            return this;
        }

        
        #endregion

    }
}